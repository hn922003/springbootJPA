package com.tjoeun.springBootJPA.repository;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.assertj.core.util.Lists;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;

import com.tjoeun.springBootJPA.domain.Gender;
import com.tjoeun.springBootJPA.domain.Member;

import jakarta.transaction.Transactional;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@SpringBootTest
class MemberRepositoryTest {

//	MemberRepository를 테스트할 것이므로 MemberRepository 인터페이스 객체를 springBoot가 자동으로
//	초기화할 수 있도록 @Autowired 어노테이션을 붙여서 선언한다.
	@Autowired
	private MemberRepository memberRepository;
	
//	특정 테스트만 실행하려면 실행할 테스트 메소드에서 ctrl + F11을 눌러 실행하면 된다.
	@Test
	void test() {
		System.out.println("MemberRepositoryTest 클래스의 test() 메소드 실행");
		
//		코드상에서 @Entity 어노테이션을 붙여서 클래스로 선언해서 만들어진 테이블에 데이터를 넣을때는
//		@GeneratedValue 어노테이션으로 기본키 값 증가 정책 IDENTITY, SEQUENCE, TABLE, AUTO 중 어느것으로
//		설정되어 있어도 기본키 값이 잘 증가한다.
		
//		1줄 출력
		log.info("member 테이블에 저장된 데이터: " + memberRepository.findAll().toString());
//		여러줄 출력
		for (Member member : memberRepository.findAll()) {
			System.out.println(member);
		}
//		람다 식을 사용한 여러줄 출력
		memberRepository.findAll().forEach(System.out::println);
	}

//	JpaRepository 인터페이스가 제공하는 JPA 메소드 테스트
	@Test
	@Transactional // jakarta.transaction.Transactional
	void crud() {
		System.out.println("MemberRepositoryTest 클래스의 crud() 메소드 실행");
		
//		전체 데이터 가져오기: findAll()
		System.out.println("전체 데이터 가져오기 ========================================================");
		List<Member> members = memberRepository.findAll();
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		전체 데이터를 정렬해서 가져오기: findAll(Sort 객체), org.springframework.data.domain
//		org.springframework.data.domain.Sort;
//		org.springframework.data.domain.Sort.Direction;
//		Sort.by(Direction.정렬방식, "정렬할 데이터가 저장된 필드 이름")
		System.out.println("전체 데이터를 정렬해서 가져오기 =============================================");
		members = memberRepository.findAll(Sort.by(Direction.ASC, "name")); // 오름차순 정렬
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findAll(Sort.by(Direction.DESC, "id"));  // 내림차순 정렬
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		특정 id의 데이터 가져오기: findById().orElse(null)
		System.out.println("특정 id의 데이터 가져오기 ===================================================");
		Member member = memberRepository.getOne(1L);
		System.out.println(member);
		member = memberRepository.getById(2L);
		System.out.println(member);
		Optional<Member> member2 = memberRepository.findById(3L);
		System.out.println(member2);
		member = memberRepository.findById(4L).orElse(null); // 이거 추천
		System.out.println(member);
		System.out.println("=============================================================================");
		
//		여러 id의 데이터 가져오기: findAllById()
		System.out.println("여러 id의 데이터 가져오기 ===================================================");
		List<Long> ids = new ArrayList<>();
		ids.add(1L);
		ids.add(3L);
		ids.add(5L);
		members = memberRepository.findAllById(ids);
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
//		org.assertj.core.util.Lists
		members = memberRepository.findAllById(Lists.newArrayList(2L, 4L, 6L));
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		단일 데이터 저장하기: save()
//		save() 메소드는 존재하지 않는 id가 입력될 경우 insert sql 명령이 실행되고 존재하는 id가 입력될 경우
//		update sql 명령이 실행된다.
		System.out.println("단일 데이터 저장하기 ========================================================");
		memberRepository.save(new Member("손오공", "son@tjoeun.com", "원숭이")); // insert
		memberRepository.flush(); // 즉시 적용, 현재는 동작 확인이 안된다.
		memberRepository.saveAndFlush(new Member("저팔계", "jeo@tjoeun.com", "돼지")); // 즉시 적용, insert
		memberRepository.save(new Member(1L, "김일승", "kim@tjoeun.com", "수령님", LocalDateTime.now(), LocalDateTime.now(), "테스트", Gender.FEMALE)); // update
		members = memberRepository.findAll();
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		일괄 데이터 저장하기: saveAll()
		System.out.println("일괄 데이터 저장하기 ========================================================");
		Member member3 = new Member("사오정", "sa@tjoeun.com", "나방");
		Member member4 = new Member("삼장법사", "sam@tjoeun.com", "스님");
		memberRepository.saveAll(Lists.newArrayList(member3, member4));
		members = memberRepository.findAll();
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		테이블에 저장된 데이터 개수 얻어오기: count()
		System.out.println("테이블에 저장된 데이터 개수 얻어오기 ========================================");
		long count = memberRepository.count();
		System.out.println(count);
		System.out.println("=============================================================================");
		
//		특정 아이디에 해당되는 데이터의 존재여부 얻어오기:
		System.out.println("테이블에 저장된 데이터 개수 얻어오기 ========================================");
		boolean exists = memberRepository.existsById(1L);
		System.out.println(exists);
		System.out.println(exists ? "있음" : "없음");
		exists = memberRepository.existsById(100L);
		System.out.println(exists);
		System.out.println("=============================================================================");
		
//		페이징: Page 인터페이스, org.springframework.data.domain.Page
		System.out.println("페이징 ======================================================================");
//		Page<페이징할 데이터가 저장된 테이블 이름> pages = memberRepository.findAll(PageRequest 객체)
//		org.springframework.data.domain.PageRequest
//		PageRequest.of(얻어올 페이지 번호, 페이지 크기[, 정렬 방식])
//		Page<Member> pages = memberRepository.findAll(PageRequest.of(3, 3));
//		Page<Member> pages = memberRepository.findAll(PageRequest.of(3, 3, Sort.by(Direction.ASC, "name")));
		Page<Member> pages = memberRepository.findAll(PageRequest.of(3, 3, Sort.by(Direction.DESC, "id")));
		System.out.println(pages); // 페이지 객체 출력
		pages.getContent().forEach(System.out::println); // 현재 페이지의 데이터 출력
		System.out.println("전체 데이터의 개수 >> " + pages.getTotalElements());
		System.out.println("현재 페이지의 데이터의 개수 >> " + pages.getNumberOfElements());
		System.out.println("1페이지의 데이터의 개수 >> " + pages.getSize());
		System.out.println("정렬 여부 >> " + pages.getSort());
		System.out.println("=============================================================================");
		
//		단일 데이터 삭제하기: delete(), deleteById()
		System.out.println("단일 데이터 삭제하기 ========================================================");
//		delete() 메소드는 인수로 삭제할 데이터 전체를 넘겨야 하고 deleteById() 메소드는 인수로 삭제할 데이터의
//		id만 넘겨주면 된다.
		memberRepository.delete(memberRepository.findById(1L).orElse(null));
		memberRepository.deleteById(2L);
		members = memberRepository.findAll();
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		특정 id의 데이터 삭제하기: deleteAll(), deleteInBatch()
		System.out.println("특정 id의 데이터 삭제하기 ===================================================");
//		deleteAll() 메소드도 인수로 삭제할 데이터 전체를 넘겨야 한다.
		memberRepository.deleteAll(memberRepository.findAllById(Lists.newArrayList(4L, 5L)));
		memberRepository.deleteInBatch(memberRepository.findAllById(Lists.newArrayList(7L, 8L)));
		members = memberRepository.findAll();
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		전체 데이터 삭제하기: deleteAll(), deleteAllInBatch()
		System.out.println("전체 데이터 삭제하기 ========================================================");
		memberRepository.deleteAll();
//		memberRepository.deleteAllInBatch();
		members = memberRepository.findAll();
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
	}
	
//	JpaRepository 인터페이스가 제공하지 않기 때문에 사용자가 만든 JPA 메소드 테스트
	
	@Test
	@Transactional
	void select() {
		System.out.println("MemberRepositoryTest 클래스의 select() 메소드 실행");
		
//		id 필드 이외의 필드 조회하기
		System.out.println("findByName() 메소드 실행하기 ================================================");
//		public Member findByName(String name) 메소드는 리턴 타입이 Member Entity 객체 이므로 인수로 전달받은
//		값에 해당되는 데이터가 1개일 경우 메소드가 정상적으로 실행되지만 여러 개일 경우 에러가 발생된다.
//		Member member = memberRepository.findByName("홍길동"); // 에러 발생
//		Member member = memberRepository.findByName("임꺽정"); // 정상 실행
//		System.out.println(member);
//		public List<Member> findByName(String name) 메소드는 리턴 타입이 Member Entity 객체를 기억하는
//		List 이므로 인수로 전달받은 값에 해당되는 데이터 개수와 상관없이 모두 정상 실행된다.
		List<Member> members = memberRepository.findByName("홍길동"); // 정상 실행
//		List<Member> members = memberRepository.findByName("임꺽정"); // 정상 실행
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		특정 접두어로 시작하는 메소드 실행하기
		System.out.println("*Email() 메소드 실행하기 ====================================================");
		members = memberRepository.findByEmail("hong@tjoeun.com");
//		members = memberRepository.getByEmail("hong@tjoeun.com");
//		members = memberRepository.queryByEmail("hong@tjoeun.com");
//		members = memberRepository.readByEmail("hong@tjoeun.com");
//		members = memberRepository.searchByEmail("hong@tjoeun.com");
//		members = memberRepository.streamByEmail("hong@tjoeun.com");
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		limit를 지정하는 메소드 실행하기
		System.out.println("limit를 지정하는 메소드 실행하기 ============================================");
		members = memberRepository.findFirst2ByName("홍길동");
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findTop2ByName("홍길동");
		members.forEach(System.out::println);
		System.out.println("=============================================================================");

//		지원되지 않는 메소드 실행하기
		System.out.println("지원되지 않는 메소드 실행하기 ===============================================");
		members = memberRepository.findLast2ByName("홍길동");
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
	}
	
	@Test
	@Transactional
	void select2() {
		System.out.println("MemberRepositoryTest 클래스의 select2() 메소드 실행");

//		초과, 미만 조건을 사용하는 메소드 실행하기
		System.out.println("초과, 미만 조건을 사용하는 메소드 실행하기 ==================================");
		List<Member> members = memberRepository.findByCreateAtAfter(LocalDateTime.now().minusDays(1L));
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByCreateAtBefore(LocalDateTime.now().plusDays(1L));
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByIdGreaterThan(4L);
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByIdLessThan(3L);
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		이상, 이하 조건을 사용하는 메소드 실행하기
		System.out.println("이상, 이하 조건을 사용하는 메소드 실행하기 ==================================");
		members = memberRepository.findByIdGreaterThanEqual(4L);
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByIdLessThanEqual(3L);
		members.forEach(System.out::println);
		System.out.println("=============================================================================");

//		And, Or 조건을 사용하는 메소드 실행하기
		System.out.println("And, Or 조건을 사용하는 메소드 실행하기 =====================================");
		members = memberRepository.findByNameAndEmail("홍길동", "hong@tjoeun.com");
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByEmailAndName("hong@tjoeun.com", "홍길동");
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameOrEmail("임꺽정", "gildong@tjoeun.com");
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByEmailOrName("gildong@tjoeun.com", "임꺽정");
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		Between을 사용하는 메소드 실행하기
		System.out.println("Between을 사용하는 메소드 실행하기 ==========================================");
		members = memberRepository.findByIdGreaterThanEqualAndIdLessThanEqual(2L, 4L);
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByIdBetween(2L, 4L);
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
	}
	
	@Test
	@Transactional
	void select3() {
		System.out.println("MemberRepositoryTest 클래스의 select3() 메소드 실행");

//		IsNull, IsNotNull 조건을 사용하는 메소드 실행하기
		System.out.println("IsNull, IsNotNull 조건을 사용하는 메소드 실행하기 ===========================");
		List<Member> members = memberRepository.findByUpdateAtIsNull();
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByUpdateAtIsNotNull();
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		In, NotIn 조건을 사용하는 메소드 실행하기
		System.out.println("In, NotIn 조건을 사용하는 메소드 실행하기 ===================================");
		members = memberRepository.findByNameIn(Lists.newArrayList("홍길동", "장길산"));
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameNotIn(Lists.newArrayList("홍길동", "장길산"));
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		Like 조건을 사용하는 메소드 실행하기
		System.out.println("Like 조건을 사용하는 메소드 실행하기 ========================================");
		members = memberRepository.findByNameLike("임%"); // "임"으로 시작하는
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameLike("%매"); // "매"로 끝나는
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameLike("%길%"); // "길"을 포함하는
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameStartingWith("임"); // "임"으로 시작하는
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameEndingWith("매"); // "매"로 끝나는
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameContains("길"); // "길"을 포함하는
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		정렬을 사용하는 메소드 실행하기
		System.out.println("정렬을 사용하는 메소드 실행하기 ========================================");
		members = memberRepository.findAllByOrderByEmailAsc(); // 이메일 오름차순 정렬
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findAllByOrderByNameDesc(); // 이름 내림차순 정렬
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameOrderByEmailAsc("홍길동"); // 이메일 오름차순 정렬
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameOrderByIdDesc("홍길동"); // 이름 내림차순 정렬
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		정렬 결과에 limit를 지정하는 메소드 실행하기
		System.out.println("정렬을 사용하는 메소드 실행하기 ========================================");
		members = memberRepository.findTop2AllByOrderByEmailAsc(); // 상위 2건
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findFirst2AllByOrderByNameDesc(); // 상위 2건
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findTop1ByNameOrderByEmailAsc("홍길동"); // 상위 1건
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findFirst1ByNameOrderByIdDesc("홍길동"); // 상위 1건
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findTopByNameOrderByEmailAsc("홍길동"); // 상위 1건
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findFirstByNameOrderByIdDesc("홍길동"); // 상위 1건
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		2차 정렬 키를 지정하는 메소드 실행하기
		System.out.println("2차 정렬 키를 지정하는 메소드 실행하기 ========================================");
		members = memberRepository.findAllByOrderByEmailAscIdDesc(); // 상위 1건
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findAllByOrderByNameDescEmailAsc(); // 상위 1건
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByNameOrderByEmailAscIdDesc("홍길동"); 
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		
//		Sort 객체로 정렬 기준을 지정하는 메소드 실행하기
		System.out.println("Sort 객체로 정렬 기준을 지정하는 메소드 실행하기 ========================================");
		members = memberRepository.findAll(Sort.by(Direction.DESC, "name")); // 1차키
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findAll(Sort.by(Order.desc("name"), Order.asc("email"))); // 2차키
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findAll(Sort.by(Order.desc("name"), Order.asc("email"), Order.desc("id"))); // 3차키
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
		members = memberRepository.findByName("홍길동", Sort.by(Direction.DESC, "email")); 
		members.forEach(System.out::println);
		System.out.println("=============================================================================");
	}
	
	@Test
	@Transactional 
	void paging() { 
		System.out.println("MemberRepositoryTest 클래스의 paging() 메소드 실행");
		
//		페이징 메소드 실행하기
		System.out.println("페이징 메소드 실행하기 ========================================");
//		PageRequest.of(얻어올 페이지 번호, 페이지 크기[, 정렬 방식])
		//Page<Member> pages = memberRepository.findAll(PageRequest.of(0, 4));
		//Page<Member> pages = memberRepository.findAll(PageRequest.of(1, 4));
		Page<Member> pages = memberRepository.findAll(PageRequest.of(0, 4, Sort.by(Order.asc("name"), Order.desc("id"))));
		System.out.println("페이징 객체 >> " + pages);
		System.out.println("전체 데이터 개수 >> " + pages.getTotalElements()); // totalCount
		System.out.println("1 페이지 크기 >> " + pages.getSize()); // pageSize
		System.out.println("전체 페이지 개수 >> " + pages.getTotalPages()); // totalPage
		System.out.println("현재 페이지 번호 >> " + pages.getNumber()); // currentPage
		System.out.println("현재 페이지의 데이터 개수 >> " + pages.getNumberOfElements()); 
		System.out.println("현재 페이지의 데이터 >> "); 
		pages.getContent().forEach(System.out::println);
		System.out.println("정렬 여부 >> " + pages.getSort()); 
		System.out.println("=============================================================================");
		System.out.println("페이징 객체의 데이터 소유 여부 >> " + pages.hasContent()); 
		System.out.println("첫 페이지 여부 >> " + pages.isFirst()); 
		System.out.println("마지막 페이지 여부 >> " + pages.isLast()); 
		System.out.println("다음 페이지 여부 >> " + pages.hasNext()); 
		System.out.println("이전 페이지 여부 >> " + pages.hasPrevious()); 
		System.out.println("=============================================================================");
		
		int start = 0;
		int size = 0;
		Sort sort = null;
		Page<Member> page = null;
		
		pages = memberRepository.findAll(PageRequest.of(1, 2, Sort.by(Order.desc("id"))));
		System.out.println("현재페이지 >> "); 
		pages.getContent().forEach(System.out::println);
		
		// 다음 페이지가 있다면 다음 페이지를 리턴하고 다음 페이지가 없다면 현재 페이지 리턴
		if (pages.hasNext()) {
			System.out.println("다음페이지가 있으면 다음페이지 리턴 >>" + pages.nextPageable());
			start = pages.nextPageable().getPageNumber(); // 페이지 번호를 얻어온다.
			size = pages.nextPageable().getPageSize(); // 페이지 크기를 얻어온다.
			sort = pages.nextPageable().getSort(); // 정렬 방식를 얻어온다.
			System.out.println(String.format("start: %d, size: %d, sort: %s", start, size, sort));
			page = memberRepository.findAll(PageRequest.of(start, size, sort));
			System.out.println("다음페이지 >> ");
			page.getContent().forEach(System.out::println);
		} else {
			System.out.println("다음페이지가 없으면 현재페이지 리턴 >>" + pages.getPageable());
			start = pages.getPageable().getPageNumber(); // 페이지 번호를 얻어온다.
			size = pages.getPageable().getPageSize(); // 페이지 크기를 얻어온다.
			sort = pages.getPageable().getSort(); // 정렬 방식를 얻어온다.
			System.out.println(String.format("start: %d, size: %d, sort: %s", start, size, sort));
			page = memberRepository.findAll(PageRequest.of(start, size, sort));
			System.out.println("현재페이지 >> ");
			page.getContent().forEach(System.out::println);
		}
		
		// 이전 페이지가 있다면 이전 페이지를 리턴하고 이전 페이지가 없다면 현재 페이지 리턴
		if (pages.hasPrevious()) {
			System.out.println("이전페이지가 있으면 이전페이지 리턴 >>" + pages.previousPageable());
			start = pages.previousPageable().getPageNumber(); // 페이지 번호를 얻어온다.
			size = pages.previousPageable().getPageSize(); // 페이지 크기를 얻어온다.
			sort = pages.previousPageable().getSort(); // 정렬 방식를 얻어온다.
			System.out.println(String.format("start: %d, size: %d, sort: %s", start, size, sort));
			page = memberRepository.findAll(PageRequest.of(start, size, sort));
			System.out.println("이전페이지 >> ");
			page.getContent().forEach(System.out::println);
		} else {
			System.out.println("이전페이지가 없으면 현재페이지 리턴 >>" + pages.getPageable());
			start = pages.getPageable().getPageNumber(); // 페이지 번호를 얻어온다.
			size = pages.getPageable().getPageSize(); // 페이지 크기를 얻어온다.
			sort = pages.getPageable().getSort(); // 정렬 방식를 얻어온다.
			System.out.println(String.format("start: %d, size: %d, sort: %s", start, size, sort));
			page = memberRepository.findAll(PageRequest.of(start, size, sort));
			System.out.println("현재페이지 >> ");
			page.getContent().forEach(System.out::println);
		}
		System.out.println("=============================================================================");
		
		// default 메소드
		pages = memberRepository.findAll(PageRequest.of(1, 2, Sort.by(Order.desc("id"))));
		System.out.println(" ==============================<< nextOrLastPageable >>============================== "); 
		//다음페이지가 있다면 다음페이지를 현재페이지가 마지막 페이지라면 현재 페이지 리턴
		start = pages.nextOrLastPageable().getPageNumber();
		size = pages.nextOrLastPageable().getPageSize();
		sort = pages.nextOrLastPageable().getSort();
		page = memberRepository.findAll(PageRequest.of(start, size, sort));
		page.getContent().forEach(System.out::println);
		
		System.out.println(" ==============================<< previousOrFirstPageable >>============================== "); 
		pages = memberRepository.findAll(PageRequest.of(1, 2, Sort.by(Order.desc("id"))));
		//이전페이지가 있다면 이전페이지를 현재페이지가 첫번째 페이지라면 현재 페이지 리턴
		start = pages.previousOrFirstPageable().getPageNumber();
		size = pages.previousOrFirstPageable().getPageSize();
		sort = pages.previousOrFirstPageable().getSort();
		page = memberRepository.findAll(PageRequest.of(start, size, sort));
		page.getContent().forEach(System.out::println);
		
//		findByName
		pages = memberRepository.findByName("홍길동", PageRequest.of(0, 1, Sort.by(Order.desc("id"))));
		pages.getContent().forEach(System.out::println);
	}
	
//	@Table, @Column, @Transient 어노테이션 테스트 메소드
	@Test
	@Transactional
	void insertAndUpdateTest() {
		System.out.println(" @Table, @Column, @Transient 어노테이션 테스트 메소드 실행 "); 
		Member member = new Member();
		member.setName("손오공");
		member.setEmail("son50@tjoeun.net");
		member.setNickname("제천대성");
		memberRepository.save(member);
		
		Member member2 = memberRepository.findById(1L).orElse(null);
		member2.setName("저팔계");
		memberRepository.save(member2);
		
		List<Member> members = memberRepository.findAll();
		members.forEach(System.out::println);
		System.out.println("========================================================================");
	}
	
//	@Enumerated 어노테이션 테스트 메소드
	@Test
	@Transactional
	void enumTest() {
		System.out.println(" @Enumerated 어노테이션 테스트 메소드 실행 "); 
		
		Member member = memberRepository.findById(1L).orElse(null);
		member.setGender(Gender.FEMALE);
		memberRepository.save(member);
		
		List<Member> members = memberRepository.findAll();
		members.forEach(System.out::println);
		
		Map<String, Object> map = memberRepository.findRawRecoed();
		//System.out.println(map.keySet());
		//System.out.println(map.values());
		for (String key : map.keySet()) {
			System.out.println(key + ": " + map.get(key));
		}
		System.out.println("========================================================================");
	}
	
//	JPA 제공 entity 이벤트 7가지
	@Test
	@Transactional
	void entityEventTest() {
		System.out.println(" JPA 제공 entity 이벤트 7가지 메소드 실행 "); 
		
		Member member = new Member();
		member.setName("손오공");
		member.setEmail("son50@aaa.com");
		member.setNickname("화과산돌원숭이");
		memberRepository.save(member); // insert - 영속화
		
		Member member2 = memberRepository.findById(1L).orElse(null); // select
		member2.setName("저팔계");
		memberRepository.save(member2); // update
		
		memberRepository.deleteById(2L); // delete
		
		List<Member> members = memberRepository.findAll(); 
		members.forEach(System.out::println);
		System.out.println("========================================================================");
	}
	
//	JPA 제공 prePersist
	@Test
	@Transactional
	void prePersistTest() {
		System.out.println(" JPA 제공 prePersistTest 메소드 실행 "); 
		
		Member member = new Member();
		member.setName("손오공");
		member.setEmail("son@bbb.com");
		member.setNickname("제천대성");
		member.setGender(Gender.MALE);
		
		// 최초 저장 시간이나 수정 시간을 엔티티가 저장되거나 수정되는 시점에 코딩하면
		// 실수를 방지할 수 있다.
		// member.setCreateAt(LocalDateTime.now()); // 최초저장시간
		// member.setUpdateAt(LocalDateTime.now()); // 최초 수정시간
		// 위의 두가지를 @prePersist @postPersist 로 저장해주면 편하다.
		
		memberRepository.save(member); // insert - 영속화
		
		List<Member> members = memberRepository.findAll(); 
		members.forEach(System.out::println);
		System.out.println("========================================================================");
	}
	
//	JPA 제공 preUpdate
	@Test
	@Transactional
	void preUpdateTest() {
		System.out.println(" JPA 제공 preUpdateTest 메소드 실행 "); 
		
		Member member = memberRepository.findById(1L).orElse(null); // select
		System.out.println("수정 전: " + member);
		
		member.setName("저팔계");
		member.setUpdateAt(LocalDateTime.now());
		memberRepository.save(member); // update
		System.out.println("수정 후: " + member);
		
		//List<Member> members = memberRepository.findAll(); 
		//members.forEach(System.out::println);
		System.out.println("========================================================================");
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}










