package com.tjoeun.springBootJPA.domain;

import java.time.LocalDateTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Index;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.persistence.UniqueConstraint;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import lombok.extern.slf4j.Slf4j;

@NoArgsConstructor       // 기본 생성자를 만든다.
@AllArgsConstructor      // 모든 필드를 초기화 하는 생성자를 만든다.
@RequiredArgsConstructor // 특정(@NonNull 어노테이션을 붙여준) 필드를 초기화 하는 생성자를 만든다.
@Getter                  // 모든 필드의 getter 메소드를 만든다.
@Setter                  // 모든 필드의 setter 메소드를 만든다.
@ToString                // toString() 메소드를 Override 한다.
@EqualsAndHashCode       // equals() 메소드와 hashCode() 메소드를 Override 한다.
@Data                    // @Getter, @Setter, @ToString, @EqualsAndHashCode를 일괄 실행한다.
@Builder                 // 생성자를 대신해서 객체를 생성한다.
@Slf4j                   // 롬복이 지원하는 log를 출력할 때 사용한다.

@Entity
@SequenceGenerator(
	name = "seq_generator", // 시퀀스 제네레이터 이름
	sequenceName = "member_id_seq", // 시퀀스 이름
	initialValue = 1, // 시퀀스 초기값
	allocationSize = 1 // 시퀀스 증가값
)

// @Table: 테이블 이름 변경, 인덱스 생성, 유일성 제약 사항을 지정할 수 있다.
@Table(name = "member2", indexes = {@Index(columnList = "name")}, uniqueConstraints = {@UniqueConstraint(columnNames = "email")})
public class Member {

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "seq_generator")
	private Long id;
	
	@NonNull             // null 값을 허용하지 않는다.
	private String name;
	@NonNull
	private String email;
	
//	@Column 테이블 필드의 별도의 설정을 위해 붙인다. 생략가능.
//	필드 이름 변경, null값 허용 여부, 유일성 제약 사항 설정, 필드 크기 지정, sql 실행시 필드 포함 여부 지정 등의 작업.
	@NonNull
	@Column(name = "nick", nullable = false, unique = true, length = 100)
	private String nickname;
	
	@Column(updatable = false) // 업데이트 불가
	private LocalDateTime createAt;
	@Column(insertable = false) // 인서트 불가
	private LocalDateTime updateAt;
	
	@Transient // 프로그래밍에만 필요하고 실제 DB에는 안들어감.
	private String testData;
	
	private Gender gender;
}












