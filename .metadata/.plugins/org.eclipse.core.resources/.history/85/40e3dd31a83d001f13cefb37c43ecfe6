package com.tjoeun.springBootJPA.domain;

import java.time.LocalDateTime;

import org.springframework.beans.factory.annotation.Autowired;

import com.tjoeun.springBootJPA.repository.MemberHistoryRepository;

import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;

public class MemberHistoryListener {
	@Autowired
	private MemberHistoryRepository memberHistoryRepository;
	
	@PrePersist
	@PreUpdate
	public void prePersistAndUpdate(Object object) {
		System.out.println("=============히스토리 엔티티 이벤트리스너의 insert / update 전 실행하는 메소드 실행==============");
		// prePersist() 메소드의 인수로 넘어온 객체가 인터페이스(Auditable)로 형변환이 되며느
		// 엔티티 이벤트 리스너를 사용하는 엔티티 객체이므로 작성일과 수정일을 저장한다.
		//System.out.println("넘어오는 객체의 클래스? => " + object.getClass()); //class com.tjoeun.springBootJPA.domain.Member
		if (object instanceof Auditable) {
			((Auditable) object).setCreateAt(LocalDateTime.now());
			((Auditable) object).setUpdateAt(LocalDateTime.now());
		}
	}

}
